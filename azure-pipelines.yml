# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
  - stage: Validate
    jobs:
    - job: Validate
      steps:
      - publish: 1-terraform
        artifact: terraform_out

      - task: TerraformCLI@0
        inputs:
            command: 'init'
            backendType: 'azurerm'
            backendServiceArm: 'Visual Studio Enterprise'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'AKSTerraform-RG'
            backendAzureRmResourceGroupLocation: 'EastUS2'
            backendAzureRmStorageAccountName: 'stgaksterraformdemo'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'demo.terraform.tfstte'

      - task: TerraformCLI@0
        inputs:
          command: 'validate'


  - stage: Deploy
    jobs:
      - deployment: Deploy_Terraform
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'DEV'
        strategy:
          runOnce: 
            deploy: 
              steps: 
              - task: TerraformCLI@0
                inputs:
                  command: 'init'
                  workingDirectory: '$Pipeline.Workspace)/terraform_out'
                  backendType: 'azurerm'
                  backendServiceArm: 'Visual Studio Enterprise'
                  ensureBackend: true
                  backendAzureRmResourceGroupName: 'AKSTerraform-RG'
                  backendAzureRmResourceGroupLocation: 'EastUS2'
                  backendAzureRmStorageAccountName: 'nyuenterraformstate'
                  backendAzureRmContainerName: 'tfstate'
                  backendAzureRmKey: 'demo.terraform.tfstate'

              - task: TerraformCLI@0
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform_out'
                  environmentServiceName: 'Visual Studio Enterprise'
                  secureVarsFile: 'aks_conf.tfvars'
                  commandOptions: '-out $(Pipeline.Workspace)/terraform_out/terraform_aks_out'

              - task: TerraformCLI@0
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform_out'
                  environmentServiceName: 'Visual Studio Enterprise'
                  commandOptions: '$(Pipeline.Workspace)/terraform_out/terraform_aks_out'